// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/screenshot/handler.proto

package screenshot

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/2637309949/micro/v3/service/api"
	client "github.com/2637309949/micro/v3/service/client"
	server "github.com/2637309949/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Screenshot service

func NewScreenshotEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Screenshot service

type ScreenshotService interface {
	Screenshot(ctx context.Context, in *ScreenshotRequest, opts ...client.CallOption) (*ScreenshotResponse, error)
}

type screenshotService struct {
	c    client.Client
	name string
}

func NewScreenshotService(name string, c client.Client) ScreenshotService {
	return &screenshotService{
		c:    c,
		name: name,
	}
}

func (c *screenshotService) Screenshot(ctx context.Context, in *ScreenshotRequest, opts ...client.CallOption) (*ScreenshotResponse, error) {
	req := c.c.NewRequest(c.name, "Screenshot.Screenshot", in)
	out := new(ScreenshotResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Screenshot service

type ScreenshotHandler interface {
	Screenshot(context.Context, *ScreenshotRequest, *ScreenshotResponse) error
}

func RegisterScreenshotHandler(s server.Server, hdlr ScreenshotHandler, opts ...server.HandlerOption) error {
	type screenshot interface {
		Screenshot(ctx context.Context, in *ScreenshotRequest, out *ScreenshotResponse) error
	}
	type Screenshot struct {
		screenshot
	}
	h := &screenshotHandler{hdlr}
	return s.Handle(s.NewHandler(&Screenshot{h}, opts...))
}

type screenshotHandler struct {
	ScreenshotHandler
}

func (h *screenshotHandler) Screenshot(ctx context.Context, in *ScreenshotRequest, out *ScreenshotResponse) error {
	return h.ScreenshotHandler.Screenshot(ctx, in, out)
}
