// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/cache/cache.proto

package cache

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRequestMultiError, or
// nil if none found.
func (m *GetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if len(errors) > 0 {
		return GetRequestMultiError(errors)
	}

	return nil
}

// GetRequestMultiError is an error wrapping multiple validation errors
// returned by GetRequest.ValidateAll() if the designated constraints aren't met.
type GetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRequestMultiError) AllErrors() []error { return m }

// GetRequestValidationError is the validation error returned by
// GetRequest.Validate if the designated constraints aren't met.
type GetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRequestValidationError) ErrorName() string { return "GetRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRequestValidationError{}

// Validate checks the field values on GetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetResponseMultiError, or
// nil if none found.
func (m *GetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return GetResponseMultiError(errors)
	}

	return nil
}

// GetResponseMultiError is an error wrapping multiple validation errors
// returned by GetResponse.ValidateAll() if the designated constraints aren't met.
type GetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResponseMultiError) AllErrors() []error { return m }

// GetResponseValidationError is the validation error returned by
// GetResponse.Validate if the designated constraints aren't met.
type GetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResponseValidationError) ErrorName() string { return "GetResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResponseValidationError{}

// Validate checks the field values on SetRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetRequestMultiError, or
// nil if none found.
func (m *SetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	// no validation rules for Expire

	if len(errors) > 0 {
		return SetRequestMultiError(errors)
	}

	return nil
}

// SetRequestMultiError is an error wrapping multiple validation errors
// returned by SetRequest.ValidateAll() if the designated constraints aren't met.
type SetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetRequestMultiError) AllErrors() []error { return m }

// SetRequestValidationError is the validation error returned by
// SetRequest.Validate if the designated constraints aren't met.
type SetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetRequestValidationError) ErrorName() string { return "SetRequestValidationError" }

// Error satisfies the builtin error interface
func (e SetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetRequestValidationError{}

// Validate checks the field values on SetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetResponseMultiError, or
// nil if none found.
func (m *SetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetResponseMultiError(errors)
	}

	return nil
}

// SetResponseMultiError is an error wrapping multiple validation errors
// returned by SetResponse.ValidateAll() if the designated constraints aren't met.
type SetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetResponseMultiError) AllErrors() []error { return m }

// SetResponseValidationError is the validation error returned by
// SetResponse.Validate if the designated constraints aren't met.
type SetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetResponseValidationError) ErrorName() string { return "SetResponseValidationError" }

// Error satisfies the builtin error interface
func (e SetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetResponseValidationError{}

// Validate checks the field values on AddRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddRequestMultiError, or
// nil if none found.
func (m *AddRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	// no validation rules for Expire

	if len(errors) > 0 {
		return AddRequestMultiError(errors)
	}

	return nil
}

// AddRequestMultiError is an error wrapping multiple validation errors
// returned by AddRequest.ValidateAll() if the designated constraints aren't met.
type AddRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRequestMultiError) AllErrors() []error { return m }

// AddRequestValidationError is the validation error returned by
// AddRequest.Validate if the designated constraints aren't met.
type AddRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRequestValidationError) ErrorName() string { return "AddRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRequestValidationError{}

// Validate checks the field values on AddResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddResponseMultiError, or
// nil if none found.
func (m *AddResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddResponseMultiError(errors)
	}

	return nil
}

// AddResponseMultiError is an error wrapping multiple validation errors
// returned by AddResponse.ValidateAll() if the designated constraints aren't met.
type AddResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddResponseMultiError) AllErrors() []error { return m }

// AddResponseValidationError is the validation error returned by
// AddResponse.Validate if the designated constraints aren't met.
type AddResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddResponseValidationError) ErrorName() string { return "AddResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddResponseValidationError{}

// Validate checks the field values on ReplaceRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReplaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReplaceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReplaceRequestMultiError,
// or nil if none found.
func (m *ReplaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReplaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	// no validation rules for Expire

	if len(errors) > 0 {
		return ReplaceRequestMultiError(errors)
	}

	return nil
}

// ReplaceRequestMultiError is an error wrapping multiple validation errors
// returned by ReplaceRequest.ValidateAll() if the designated constraints
// aren't met.
type ReplaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplaceRequestMultiError) AllErrors() []error { return m }

// ReplaceRequestValidationError is the validation error returned by
// ReplaceRequest.Validate if the designated constraints aren't met.
type ReplaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplaceRequestValidationError) ErrorName() string { return "ReplaceRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReplaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReplaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplaceRequestValidationError{}

// Validate checks the field values on ReplaceResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReplaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReplaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReplaceResponseMultiError, or nil if none found.
func (m *ReplaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReplaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReplaceResponseMultiError(errors)
	}

	return nil
}

// ReplaceResponseMultiError is an error wrapping multiple validation errors
// returned by ReplaceResponse.ValidateAll() if the designated constraints
// aren't met.
type ReplaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplaceResponseMultiError) AllErrors() []error { return m }

// ReplaceResponseValidationError is the validation error returned by
// ReplaceResponse.Validate if the designated constraints aren't met.
type ReplaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplaceResponseValidationError) ErrorName() string { return "ReplaceResponseValidationError" }

// Error satisfies the builtin error interface
func (e ReplaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReplaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplaceResponseValidationError{}

// Validate checks the field values on DeleteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteRequestMultiError, or
// nil if none found.
func (m *DeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if len(errors) > 0 {
		return DeleteRequestMultiError(errors)
	}

	return nil
}

// DeleteRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRequestMultiError) AllErrors() []error { return m }

// DeleteRequestValidationError is the validation error returned by
// DeleteRequest.Validate if the designated constraints aren't met.
type DeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRequestValidationError) ErrorName() string { return "DeleteRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRequestValidationError{}

// Validate checks the field values on DeleteResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteResponseMultiError,
// or nil if none found.
func (m *DeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteResponseMultiError(errors)
	}

	return nil
}

// DeleteResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResponseMultiError) AllErrors() []error { return m }

// DeleteResponseValidationError is the validation error returned by
// DeleteResponse.Validate if the designated constraints aren't met.
type DeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResponseValidationError) ErrorName() string { return "DeleteResponseValidationError" }

// Error satisfies the builtin error interface
func (e DeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResponseValidationError{}

// Validate checks the field values on IncrementRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IncrementRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IncrementRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IncrementRequestMultiError, or nil if none found.
func (m *IncrementRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IncrementRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return IncrementRequestMultiError(errors)
	}

	return nil
}

// IncrementRequestMultiError is an error wrapping multiple validation errors
// returned by IncrementRequest.ValidateAll() if the designated constraints
// aren't met.
type IncrementRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IncrementRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IncrementRequestMultiError) AllErrors() []error { return m }

// IncrementRequestValidationError is the validation error returned by
// IncrementRequest.Validate if the designated constraints aren't met.
type IncrementRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IncrementRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IncrementRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IncrementRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IncrementRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IncrementRequestValidationError) ErrorName() string { return "IncrementRequestValidationError" }

// Error satisfies the builtin error interface
func (e IncrementRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIncrementRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IncrementRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IncrementRequestValidationError{}

// Validate checks the field values on IncrementResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IncrementResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IncrementResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IncrementResponseMultiError, or nil if none found.
func (m *IncrementResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IncrementResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return IncrementResponseMultiError(errors)
	}

	return nil
}

// IncrementResponseMultiError is an error wrapping multiple validation errors
// returned by IncrementResponse.ValidateAll() if the designated constraints
// aren't met.
type IncrementResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IncrementResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IncrementResponseMultiError) AllErrors() []error { return m }

// IncrementResponseValidationError is the validation error returned by
// IncrementResponse.Validate if the designated constraints aren't met.
type IncrementResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IncrementResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IncrementResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IncrementResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IncrementResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IncrementResponseValidationError) ErrorName() string {
	return "IncrementResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IncrementResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIncrementResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IncrementResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IncrementResponseValidationError{}

// Validate checks the field values on DecrementRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DecrementRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DecrementRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DecrementRequestMultiError, or nil if none found.
func (m *DecrementRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DecrementRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return DecrementRequestMultiError(errors)
	}

	return nil
}

// DecrementRequestMultiError is an error wrapping multiple validation errors
// returned by DecrementRequest.ValidateAll() if the designated constraints
// aren't met.
type DecrementRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DecrementRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DecrementRequestMultiError) AllErrors() []error { return m }

// DecrementRequestValidationError is the validation error returned by
// DecrementRequest.Validate if the designated constraints aren't met.
type DecrementRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DecrementRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DecrementRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DecrementRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DecrementRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DecrementRequestValidationError) ErrorName() string { return "DecrementRequestValidationError" }

// Error satisfies the builtin error interface
func (e DecrementRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecrementRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DecrementRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DecrementRequestValidationError{}

// Validate checks the field values on DecrementResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DecrementResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DecrementResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DecrementResponseMultiError, or nil if none found.
func (m *DecrementResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DecrementResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return DecrementResponseMultiError(errors)
	}

	return nil
}

// DecrementResponseMultiError is an error wrapping multiple validation errors
// returned by DecrementResponse.ValidateAll() if the designated constraints
// aren't met.
type DecrementResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DecrementResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DecrementResponseMultiError) AllErrors() []error { return m }

// DecrementResponseValidationError is the validation error returned by
// DecrementResponse.Validate if the designated constraints aren't met.
type DecrementResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DecrementResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DecrementResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DecrementResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DecrementResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DecrementResponseValidationError) ErrorName() string {
	return "DecrementResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DecrementResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecrementResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DecrementResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DecrementResponseValidationError{}

// Validate checks the field values on FlushRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FlushRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FlushRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FlushRequestMultiError, or
// nil if none found.
func (m *FlushRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FlushRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FlushRequestMultiError(errors)
	}

	return nil
}

// FlushRequestMultiError is an error wrapping multiple validation errors
// returned by FlushRequest.ValidateAll() if the designated constraints aren't met.
type FlushRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FlushRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FlushRequestMultiError) AllErrors() []error { return m }

// FlushRequestValidationError is the validation error returned by
// FlushRequest.Validate if the designated constraints aren't met.
type FlushRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlushRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlushRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlushRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlushRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlushRequestValidationError) ErrorName() string { return "FlushRequestValidationError" }

// Error satisfies the builtin error interface
func (e FlushRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlushRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlushRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlushRequestValidationError{}

// Validate checks the field values on FlushResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FlushResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FlushResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FlushResponseMultiError, or
// nil if none found.
func (m *FlushResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FlushResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FlushResponseMultiError(errors)
	}

	return nil
}

// FlushResponseMultiError is an error wrapping multiple validation errors
// returned by FlushResponse.ValidateAll() if the designated constraints
// aren't met.
type FlushResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FlushResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FlushResponseMultiError) AllErrors() []error { return m }

// FlushResponseValidationError is the validation error returned by
// FlushResponse.Validate if the designated constraints aren't met.
type FlushResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlushResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlushResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlushResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlushResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlushResponseValidationError) ErrorName() string { return "FlushResponseValidationError" }

// Error satisfies the builtin error interface
func (e FlushResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlushResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlushResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlushResponseValidationError{}
