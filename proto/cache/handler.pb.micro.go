// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/cache/handler.proto

package cache

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/2637309949/micro/v3/service/api"
	client "github.com/2637309949/micro/v3/service/client"
	server "github.com/2637309949/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Cache service

func NewCacheEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Cache service

type CacheService interface {
	// Get retrieves an item from the cache. Returns the item or nil, and a bool indicating
	// whether the key was found.
	Get(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error)
	// Set sets an item to the cache, replacing any existing item.
	Set(ctx context.Context, in *SetRequest, opts ...client.CallOption) (*SetResponse, error)
	// Add adds an item to the cache only if an item doesn't already exist for the given
	// key, or if the existing item has expired. Returns an error otherwise.
	Add(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error)
	// Replace sets a new value for the cache key only if it already exists. Returns an
	// error if it does not.
	Replace(ctx context.Context, in *ReplaceRequest, opts ...client.CallOption) (*ReplaceResponse, error)
	// Delete removes an item from the cache. Does nothing if the key is not in the cache.
	Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
	// Increment increments a real number, and returns error if the value is not real
	Increment(ctx context.Context, in *IncrementRequest, opts ...client.CallOption) (*IncrementResponse, error)
	// Decrement decrements a real number, and returns error if the value is not real
	Decrement(ctx context.Context, in *DecrementRequest, opts ...client.CallOption) (*DecrementResponse, error)
	// Flush seletes all items from the cache.
	Flush(ctx context.Context, in *FlushRequest, opts ...client.CallOption) (*FlushResponse, error)
}

type cacheService struct {
	c    client.Client
	name string
}

func NewCacheService(name string, c client.Client) CacheService {
	return &cacheService{
		c:    c,
		name: name,
	}
}

func (c *cacheService) Get(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error) {
	req := c.c.NewRequest(c.name, "Cache.Get", in)
	out := new(GetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheService) Set(ctx context.Context, in *SetRequest, opts ...client.CallOption) (*SetResponse, error) {
	req := c.c.NewRequest(c.name, "Cache.Set", in)
	out := new(SetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheService) Add(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error) {
	req := c.c.NewRequest(c.name, "Cache.Add", in)
	out := new(AddResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheService) Replace(ctx context.Context, in *ReplaceRequest, opts ...client.CallOption) (*ReplaceResponse, error) {
	req := c.c.NewRequest(c.name, "Cache.Replace", in)
	out := new(ReplaceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheService) Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "Cache.Delete", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheService) Increment(ctx context.Context, in *IncrementRequest, opts ...client.CallOption) (*IncrementResponse, error) {
	req := c.c.NewRequest(c.name, "Cache.Increment", in)
	out := new(IncrementResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheService) Decrement(ctx context.Context, in *DecrementRequest, opts ...client.CallOption) (*DecrementResponse, error) {
	req := c.c.NewRequest(c.name, "Cache.Decrement", in)
	out := new(DecrementResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheService) Flush(ctx context.Context, in *FlushRequest, opts ...client.CallOption) (*FlushResponse, error) {
	req := c.c.NewRequest(c.name, "Cache.Flush", in)
	out := new(FlushResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cache service

type CacheHandler interface {
	// Get retrieves an item from the cache. Returns the item or nil, and a bool indicating
	// whether the key was found.
	Get(context.Context, *GetRequest, *GetResponse) error
	// Set sets an item to the cache, replacing any existing item.
	Set(context.Context, *SetRequest, *SetResponse) error
	// Add adds an item to the cache only if an item doesn't already exist for the given
	// key, or if the existing item has expired. Returns an error otherwise.
	Add(context.Context, *AddRequest, *AddResponse) error
	// Replace sets a new value for the cache key only if it already exists. Returns an
	// error if it does not.
	Replace(context.Context, *ReplaceRequest, *ReplaceResponse) error
	// Delete removes an item from the cache. Does nothing if the key is not in the cache.
	Delete(context.Context, *DeleteRequest, *DeleteResponse) error
	// Increment increments a real number, and returns error if the value is not real
	Increment(context.Context, *IncrementRequest, *IncrementResponse) error
	// Decrement decrements a real number, and returns error if the value is not real
	Decrement(context.Context, *DecrementRequest, *DecrementResponse) error
	// Flush seletes all items from the cache.
	Flush(context.Context, *FlushRequest, *FlushResponse) error
}

func RegisterCacheHandler(s server.Server, hdlr CacheHandler, opts ...server.HandlerOption) error {
	type cache interface {
		Get(ctx context.Context, in *GetRequest, out *GetResponse) error
		Set(ctx context.Context, in *SetRequest, out *SetResponse) error
		Add(ctx context.Context, in *AddRequest, out *AddResponse) error
		Replace(ctx context.Context, in *ReplaceRequest, out *ReplaceResponse) error
		Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error
		Increment(ctx context.Context, in *IncrementRequest, out *IncrementResponse) error
		Decrement(ctx context.Context, in *DecrementRequest, out *DecrementResponse) error
		Flush(ctx context.Context, in *FlushRequest, out *FlushResponse) error
	}
	type Cache struct {
		cache
	}
	h := &cacheHandler{hdlr}
	return s.Handle(s.NewHandler(&Cache{h}, opts...))
}

type cacheHandler struct {
	CacheHandler
}

func (h *cacheHandler) Get(ctx context.Context, in *GetRequest, out *GetResponse) error {
	return h.CacheHandler.Get(ctx, in, out)
}

func (h *cacheHandler) Set(ctx context.Context, in *SetRequest, out *SetResponse) error {
	return h.CacheHandler.Set(ctx, in, out)
}

func (h *cacheHandler) Add(ctx context.Context, in *AddRequest, out *AddResponse) error {
	return h.CacheHandler.Add(ctx, in, out)
}

func (h *cacheHandler) Replace(ctx context.Context, in *ReplaceRequest, out *ReplaceResponse) error {
	return h.CacheHandler.Replace(ctx, in, out)
}

func (h *cacheHandler) Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.CacheHandler.Delete(ctx, in, out)
}

func (h *cacheHandler) Increment(ctx context.Context, in *IncrementRequest, out *IncrementResponse) error {
	return h.CacheHandler.Increment(ctx, in, out)
}

func (h *cacheHandler) Decrement(ctx context.Context, in *DecrementRequest, out *DecrementResponse) error {
	return h.CacheHandler.Decrement(ctx, in, out)
}

func (h *cacheHandler) Flush(ctx context.Context, in *FlushRequest, out *FlushResponse) error {
	return h.CacheHandler.Flush(ctx, in, out)
}
