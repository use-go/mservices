// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/user/handler.proto

package user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/2637309949/micro/v3/service/api"
	client "github.com/2637309949/micro/v3/service/client"
	server "github.com/2637309949/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Account service

func NewAccountEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Account service

type AccountService interface {
	Create(ctx context.Context, in *CreateReq, opts ...client.CallOption) (*CreateRes, error)
	Read(ctx context.Context, in *ReadReq, opts ...client.CallOption) (*ReadRes, error)
	Update(ctx context.Context, in *UpdateReq, opts ...client.CallOption) (*UpdateRes, error)
	Delete(ctx context.Context, in *DeleteReq, opts ...client.CallOption) (*DeleteRes, error)
	List(ctx context.Context, in *ListReq, opts ...client.CallOption) (*ListRes, error)
	UpdatePassword(ctx context.Context, in *UpdatePasswordReq, opts ...client.CallOption) (*UpdatePasswordRes, error)
	VerifyEmail(ctx context.Context, in *VerifyEmailReq, opts ...client.CallOption) (*VerifyEmailRes, error)
	SendVerificationEmail(ctx context.Context, in *SendVerificationEmailReq, opts ...client.CallOption) (*SendVerificationEmailRes, error)
	SendPasswordResetEmail(ctx context.Context, in *SendPasswordResetEmailReq, opts ...client.CallOption) (*SendPasswordResetEmailRes, error)
	ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...client.CallOption) (*ResetPasswordRes, error)
}

type accountService struct {
	c    client.Client
	name string
}

func NewAccountService(name string, c client.Client) AccountService {
	return &accountService{
		c:    c,
		name: name,
	}
}

func (c *accountService) Create(ctx context.Context, in *CreateReq, opts ...client.CallOption) (*CreateRes, error) {
	req := c.c.NewRequest(c.name, "Account.Create", in)
	out := new(CreateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) Read(ctx context.Context, in *ReadReq, opts ...client.CallOption) (*ReadRes, error) {
	req := c.c.NewRequest(c.name, "Account.Read", in)
	out := new(ReadRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) Update(ctx context.Context, in *UpdateReq, opts ...client.CallOption) (*UpdateRes, error) {
	req := c.c.NewRequest(c.name, "Account.Update", in)
	out := new(UpdateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) Delete(ctx context.Context, in *DeleteReq, opts ...client.CallOption) (*DeleteRes, error) {
	req := c.c.NewRequest(c.name, "Account.Delete", in)
	out := new(DeleteRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) List(ctx context.Context, in *ListReq, opts ...client.CallOption) (*ListRes, error) {
	req := c.c.NewRequest(c.name, "Account.List", in)
	out := new(ListRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) UpdatePassword(ctx context.Context, in *UpdatePasswordReq, opts ...client.CallOption) (*UpdatePasswordRes, error) {
	req := c.c.NewRequest(c.name, "Account.UpdatePassword", in)
	out := new(UpdatePasswordRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) VerifyEmail(ctx context.Context, in *VerifyEmailReq, opts ...client.CallOption) (*VerifyEmailRes, error) {
	req := c.c.NewRequest(c.name, "Account.VerifyEmail", in)
	out := new(VerifyEmailRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) SendVerificationEmail(ctx context.Context, in *SendVerificationEmailReq, opts ...client.CallOption) (*SendVerificationEmailRes, error) {
	req := c.c.NewRequest(c.name, "Account.SendVerificationEmail", in)
	out := new(SendVerificationEmailRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) SendPasswordResetEmail(ctx context.Context, in *SendPasswordResetEmailReq, opts ...client.CallOption) (*SendPasswordResetEmailRes, error) {
	req := c.c.NewRequest(c.name, "Account.SendPasswordResetEmail", in)
	out := new(SendPasswordResetEmailRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...client.CallOption) (*ResetPasswordRes, error) {
	req := c.c.NewRequest(c.name, "Account.ResetPassword", in)
	out := new(ResetPasswordRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Account service

type AccountHandler interface {
	Create(context.Context, *CreateReq, *CreateRes) error
	Read(context.Context, *ReadReq, *ReadRes) error
	Update(context.Context, *UpdateReq, *UpdateRes) error
	Delete(context.Context, *DeleteReq, *DeleteRes) error
	List(context.Context, *ListReq, *ListRes) error
	UpdatePassword(context.Context, *UpdatePasswordReq, *UpdatePasswordRes) error
	VerifyEmail(context.Context, *VerifyEmailReq, *VerifyEmailRes) error
	SendVerificationEmail(context.Context, *SendVerificationEmailReq, *SendVerificationEmailRes) error
	SendPasswordResetEmail(context.Context, *SendPasswordResetEmailReq, *SendPasswordResetEmailRes) error
	ResetPassword(context.Context, *ResetPasswordReq, *ResetPasswordRes) error
}

func RegisterAccountHandler(s server.Server, hdlr AccountHandler, opts ...server.HandlerOption) error {
	type account interface {
		Create(ctx context.Context, in *CreateReq, out *CreateRes) error
		Read(ctx context.Context, in *ReadReq, out *ReadRes) error
		Update(ctx context.Context, in *UpdateReq, out *UpdateRes) error
		Delete(ctx context.Context, in *DeleteReq, out *DeleteRes) error
		List(ctx context.Context, in *ListReq, out *ListRes) error
		UpdatePassword(ctx context.Context, in *UpdatePasswordReq, out *UpdatePasswordRes) error
		VerifyEmail(ctx context.Context, in *VerifyEmailReq, out *VerifyEmailRes) error
		SendVerificationEmail(ctx context.Context, in *SendVerificationEmailReq, out *SendVerificationEmailRes) error
		SendPasswordResetEmail(ctx context.Context, in *SendPasswordResetEmailReq, out *SendPasswordResetEmailRes) error
		ResetPassword(ctx context.Context, in *ResetPasswordReq, out *ResetPasswordRes) error
	}
	type Account struct {
		account
	}
	h := &accountHandler{hdlr}
	return s.Handle(s.NewHandler(&Account{h}, opts...))
}

type accountHandler struct {
	AccountHandler
}

func (h *accountHandler) Create(ctx context.Context, in *CreateReq, out *CreateRes) error {
	return h.AccountHandler.Create(ctx, in, out)
}

func (h *accountHandler) Read(ctx context.Context, in *ReadReq, out *ReadRes) error {
	return h.AccountHandler.Read(ctx, in, out)
}

func (h *accountHandler) Update(ctx context.Context, in *UpdateReq, out *UpdateRes) error {
	return h.AccountHandler.Update(ctx, in, out)
}

func (h *accountHandler) Delete(ctx context.Context, in *DeleteReq, out *DeleteRes) error {
	return h.AccountHandler.Delete(ctx, in, out)
}

func (h *accountHandler) List(ctx context.Context, in *ListReq, out *ListRes) error {
	return h.AccountHandler.List(ctx, in, out)
}

func (h *accountHandler) UpdatePassword(ctx context.Context, in *UpdatePasswordReq, out *UpdatePasswordRes) error {
	return h.AccountHandler.UpdatePassword(ctx, in, out)
}

func (h *accountHandler) VerifyEmail(ctx context.Context, in *VerifyEmailReq, out *VerifyEmailRes) error {
	return h.AccountHandler.VerifyEmail(ctx, in, out)
}

func (h *accountHandler) SendVerificationEmail(ctx context.Context, in *SendVerificationEmailReq, out *SendVerificationEmailRes) error {
	return h.AccountHandler.SendVerificationEmail(ctx, in, out)
}

func (h *accountHandler) SendPasswordResetEmail(ctx context.Context, in *SendPasswordResetEmailReq, out *SendPasswordResetEmailRes) error {
	return h.AccountHandler.SendPasswordResetEmail(ctx, in, out)
}

func (h *accountHandler) ResetPassword(ctx context.Context, in *ResetPasswordReq, out *ResetPasswordRes) error {
	return h.AccountHandler.ResetPassword(ctx, in, out)
}
