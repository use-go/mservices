// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/helloworld/info.proto

package helloworld

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on InsertInfoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InsertInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InsertInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InsertInfoRequestMultiError, or nil if none found.
func (m *InsertInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InsertInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return InsertInfoRequestMultiError(errors)
	}

	return nil
}

// InsertInfoRequestMultiError is an error wrapping multiple validation errors
// returned by InsertInfoRequest.ValidateAll() if the designated constraints
// aren't met.
type InsertInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InsertInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InsertInfoRequestMultiError) AllErrors() []error { return m }

// InsertInfoRequestValidationError is the validation error returned by
// InsertInfoRequest.Validate if the designated constraints aren't met.
type InsertInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InsertInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InsertInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InsertInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InsertInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InsertInfoRequestValidationError) ErrorName() string {
	return "InsertInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InsertInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInsertInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InsertInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InsertInfoRequestValidationError{}

// Validate checks the field values on InsertInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InsertInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InsertInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InsertInfoResponseMultiError, or nil if none found.
func (m *InsertInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InsertInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return InsertInfoResponseMultiError(errors)
	}

	return nil
}

// InsertInfoResponseMultiError is an error wrapping multiple validation errors
// returned by InsertInfoResponse.ValidateAll() if the designated constraints
// aren't met.
type InsertInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InsertInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InsertInfoResponseMultiError) AllErrors() []error { return m }

// InsertInfoResponseValidationError is the validation error returned by
// InsertInfoResponse.Validate if the designated constraints aren't met.
type InsertInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InsertInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InsertInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InsertInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InsertInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InsertInfoResponseValidationError) ErrorName() string {
	return "InsertInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InsertInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInsertInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InsertInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InsertInfoResponseValidationError{}

// Validate checks the field values on DeleteInfoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteInfoRequestMultiError, or nil if none found.
func (m *DeleteInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteInfoRequestMultiError(errors)
	}

	return nil
}

// DeleteInfoRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteInfoRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteInfoRequestMultiError) AllErrors() []error { return m }

// DeleteInfoRequestValidationError is the validation error returned by
// DeleteInfoRequest.Validate if the designated constraints aren't met.
type DeleteInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInfoRequestValidationError) ErrorName() string {
	return "DeleteInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInfoRequestValidationError{}

// Validate checks the field values on DeleteInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteInfoResponseMultiError, or nil if none found.
func (m *DeleteInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteInfoResponseMultiError(errors)
	}

	return nil
}

// DeleteInfoResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteInfoResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteInfoResponseMultiError) AllErrors() []error { return m }

// DeleteInfoResponseValidationError is the validation error returned by
// DeleteInfoResponse.Validate if the designated constraints aren't met.
type DeleteInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInfoResponseValidationError) ErrorName() string {
	return "DeleteInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInfoResponseValidationError{}

// Validate checks the field values on UpdateInfoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateInfoRequestMultiError, or nil if none found.
func (m *UpdateInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateInfoRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	if len(errors) > 0 {
		return UpdateInfoRequestMultiError(errors)
	}

	return nil
}

// UpdateInfoRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateInfoRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateInfoRequestMultiError) AllErrors() []error { return m }

// UpdateInfoRequestValidationError is the validation error returned by
// UpdateInfoRequest.Validate if the designated constraints aren't met.
type UpdateInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateInfoRequestValidationError) ErrorName() string {
	return "UpdateInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateInfoRequestValidationError{}

// Validate checks the field values on UpdateInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateInfoResponseMultiError, or nil if none found.
func (m *UpdateInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateInfoResponseMultiError(errors)
	}

	return nil
}

// UpdateInfoResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateInfoResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateInfoResponseMultiError) AllErrors() []error { return m }

// UpdateInfoResponseValidationError is the validation error returned by
// UpdateInfoResponse.Validate if the designated constraints aren't met.
type UpdateInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateInfoResponseValidationError) ErrorName() string {
	return "UpdateInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateInfoResponseValidationError{}

// Validate checks the field values on QueryInfoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryInfoRequestMultiError, or nil if none found.
func (m *QueryInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Page

	// no validation rules for Size

	// no validation rules for OrderType

	// no validation rules for OrderCol

	if len(errors) > 0 {
		return QueryInfoRequestMultiError(errors)
	}

	return nil
}

// QueryInfoRequestMultiError is an error wrapping multiple validation errors
// returned by QueryInfoRequest.ValidateAll() if the designated constraints
// aren't met.
type QueryInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryInfoRequestMultiError) AllErrors() []error { return m }

// QueryInfoRequestValidationError is the validation error returned by
// QueryInfoRequest.Validate if the designated constraints aren't met.
type QueryInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryInfoRequestValidationError) ErrorName() string { return "QueryInfoRequestValidationError" }

// Error satisfies the builtin error interface
func (e QueryInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryInfoRequestValidationError{}

// Validate checks the field values on QueryInfoResponseItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryInfoResponseItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryInfoResponseItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryInfoResponseItemMultiError, or nil if none found.
func (m *QueryInfoResponseItem) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryInfoResponseItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return QueryInfoResponseItemMultiError(errors)
	}

	return nil
}

// QueryInfoResponseItemMultiError is an error wrapping multiple validation
// errors returned by QueryInfoResponseItem.ValidateAll() if the designated
// constraints aren't met.
type QueryInfoResponseItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryInfoResponseItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryInfoResponseItemMultiError) AllErrors() []error { return m }

// QueryInfoResponseItemValidationError is the validation error returned by
// QueryInfoResponseItem.Validate if the designated constraints aren't met.
type QueryInfoResponseItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryInfoResponseItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryInfoResponseItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryInfoResponseItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryInfoResponseItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryInfoResponseItemValidationError) ErrorName() string {
	return "QueryInfoResponseItemValidationError"
}

// Error satisfies the builtin error interface
func (e QueryInfoResponseItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryInfoResponseItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryInfoResponseItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryInfoResponseItemValidationError{}

// Validate checks the field values on QueryInfoResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryInfoResponseMultiError, or nil if none found.
func (m *QueryInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryInfoResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryInfoResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryInfoResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for Size

	// no validation rules for TotalCount

	if len(errors) > 0 {
		return QueryInfoResponseMultiError(errors)
	}

	return nil
}

// QueryInfoResponseMultiError is an error wrapping multiple validation errors
// returned by QueryInfoResponse.ValidateAll() if the designated constraints
// aren't met.
type QueryInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryInfoResponseMultiError) AllErrors() []error { return m }

// QueryInfoResponseValidationError is the validation error returned by
// QueryInfoResponse.Validate if the designated constraints aren't met.
type QueryInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryInfoResponseValidationError) ErrorName() string {
	return "QueryInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryInfoResponseValidationError{}

// Validate checks the field values on QueryInfoDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryInfoDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryInfoDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryInfoDetailRequestMultiError, or nil if none found.
func (m *QueryInfoDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryInfoDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return QueryInfoDetailRequestMultiError(errors)
	}

	return nil
}

// QueryInfoDetailRequestMultiError is an error wrapping multiple validation
// errors returned by QueryInfoDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryInfoDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryInfoDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryInfoDetailRequestMultiError) AllErrors() []error { return m }

// QueryInfoDetailRequestValidationError is the validation error returned by
// QueryInfoDetailRequest.Validate if the designated constraints aren't met.
type QueryInfoDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryInfoDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryInfoDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryInfoDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryInfoDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryInfoDetailRequestValidationError) ErrorName() string {
	return "QueryInfoDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryInfoDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryInfoDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryInfoDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryInfoDetailRequestValidationError{}

// Validate checks the field values on QueryInfoDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryInfoDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryInfoDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryInfoDetailResponseMultiError, or nil if none found.
func (m *QueryInfoDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryInfoDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return QueryInfoDetailResponseMultiError(errors)
	}

	return nil
}

// QueryInfoDetailResponseMultiError is an error wrapping multiple validation
// errors returned by QueryInfoDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryInfoDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryInfoDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryInfoDetailResponseMultiError) AllErrors() []error { return m }

// QueryInfoDetailResponseValidationError is the validation error returned by
// QueryInfoDetailResponse.Validate if the designated constraints aren't met.
type QueryInfoDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryInfoDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryInfoDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryInfoDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryInfoDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryInfoDetailResponseValidationError) ErrorName() string {
	return "QueryInfoDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryInfoDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryInfoDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryInfoDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryInfoDetailResponseValidationError{}
