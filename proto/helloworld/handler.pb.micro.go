// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/helloworld/handler.proto

package helloworld

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for HelloworldService service

func NewHelloworldServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for HelloworldService service

type HelloworldService interface {
	DeleteHelloworld(ctx context.Context, in *HelloworldFilter, opts ...client.CallOption) (*Helloworld, error)
	UpdateHelloworld(ctx context.Context, in *Helloworld, opts ...client.CallOption) (*Helloworld, error)
	InsertHelloworld(ctx context.Context, in *Helloworld, opts ...client.CallOption) (*Helloworld, error)
	QueryHelloworldDetail(ctx context.Context, in *HelloworldFilter, opts ...client.CallOption) (*Helloworld, error)
	QueryHelloworld(ctx context.Context, in *HelloworldFilter, opts ...client.CallOption) (*HelloworldList, error)
}

type helloworldService struct {
	c    client.Client
	name string
}

func NewHelloworldService(name string, c client.Client) HelloworldService {
	return &helloworldService{
		c:    c,
		name: name,
	}
}

func (c *helloworldService) DeleteHelloworld(ctx context.Context, in *HelloworldFilter, opts ...client.CallOption) (*Helloworld, error) {
	req := c.c.NewRequest(c.name, "HelloworldService.DeleteHelloworld", in)
	out := new(Helloworld)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloworldService) UpdateHelloworld(ctx context.Context, in *Helloworld, opts ...client.CallOption) (*Helloworld, error) {
	req := c.c.NewRequest(c.name, "HelloworldService.UpdateHelloworld", in)
	out := new(Helloworld)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloworldService) InsertHelloworld(ctx context.Context, in *Helloworld, opts ...client.CallOption) (*Helloworld, error) {
	req := c.c.NewRequest(c.name, "HelloworldService.InsertHelloworld", in)
	out := new(Helloworld)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloworldService) QueryHelloworldDetail(ctx context.Context, in *HelloworldFilter, opts ...client.CallOption) (*Helloworld, error) {
	req := c.c.NewRequest(c.name, "HelloworldService.QueryHelloworldDetail", in)
	out := new(Helloworld)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloworldService) QueryHelloworld(ctx context.Context, in *HelloworldFilter, opts ...client.CallOption) (*HelloworldList, error) {
	req := c.c.NewRequest(c.name, "HelloworldService.QueryHelloworld", in)
	out := new(HelloworldList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HelloworldService service

type HelloworldServiceHandler interface {
	DeleteHelloworld(context.Context, *HelloworldFilter, *Helloworld) error
	UpdateHelloworld(context.Context, *Helloworld, *Helloworld) error
	InsertHelloworld(context.Context, *Helloworld, *Helloworld) error
	QueryHelloworldDetail(context.Context, *HelloworldFilter, *Helloworld) error
	QueryHelloworld(context.Context, *HelloworldFilter, *HelloworldList) error
}

func RegisterHelloworldServiceHandler(s server.Server, hdlr HelloworldServiceHandler, opts ...server.HandlerOption) error {
	type helloworldService interface {
		DeleteHelloworld(ctx context.Context, in *HelloworldFilter, out *Helloworld) error
		UpdateHelloworld(ctx context.Context, in *Helloworld, out *Helloworld) error
		InsertHelloworld(ctx context.Context, in *Helloworld, out *Helloworld) error
		QueryHelloworldDetail(ctx context.Context, in *HelloworldFilter, out *Helloworld) error
		QueryHelloworld(ctx context.Context, in *HelloworldFilter, out *HelloworldList) error
	}
	type HelloworldService struct {
		helloworldService
	}
	h := &helloworldServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&HelloworldService{h}, opts...))
}

type helloworldServiceHandler struct {
	HelloworldServiceHandler
}

func (h *helloworldServiceHandler) DeleteHelloworld(ctx context.Context, in *HelloworldFilter, out *Helloworld) error {
	return h.HelloworldServiceHandler.DeleteHelloworld(ctx, in, out)
}

func (h *helloworldServiceHandler) UpdateHelloworld(ctx context.Context, in *Helloworld, out *Helloworld) error {
	return h.HelloworldServiceHandler.UpdateHelloworld(ctx, in, out)
}

func (h *helloworldServiceHandler) InsertHelloworld(ctx context.Context, in *Helloworld, out *Helloworld) error {
	return h.HelloworldServiceHandler.InsertHelloworld(ctx, in, out)
}

func (h *helloworldServiceHandler) QueryHelloworldDetail(ctx context.Context, in *HelloworldFilter, out *Helloworld) error {
	return h.HelloworldServiceHandler.QueryHelloworldDetail(ctx, in, out)
}

func (h *helloworldServiceHandler) QueryHelloworld(ctx context.Context, in *HelloworldFilter, out *HelloworldList) error {
	return h.HelloworldServiceHandler.QueryHelloworld(ctx, in, out)
}

// Api Endpoints for HelloworldService22 service

func NewHelloworldService22Endpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for HelloworldService22 service

type HelloworldService22Service interface {
	DeleteHelloworld(ctx context.Context, in *HelloworldFilter, opts ...client.CallOption) (*Helloworld, error)
	UpdateHelloworld(ctx context.Context, in *Helloworld, opts ...client.CallOption) (*Helloworld, error)
	InsertHelloworld(ctx context.Context, in *Helloworld, opts ...client.CallOption) (*Helloworld, error)
	QueryHelloworldDetail(ctx context.Context, in *HelloworldFilter, opts ...client.CallOption) (*Helloworld, error)
	QueryHelloworld(ctx context.Context, in *HelloworldFilter, opts ...client.CallOption) (*HelloworldList, error)
}

type helloworldService22Service struct {
	c    client.Client
	name string
}

func NewHelloworldService22Service(name string, c client.Client) HelloworldService22Service {
	return &helloworldService22Service{
		c:    c,
		name: name,
	}
}

func (c *helloworldService22Service) DeleteHelloworld(ctx context.Context, in *HelloworldFilter, opts ...client.CallOption) (*Helloworld, error) {
	req := c.c.NewRequest(c.name, "HelloworldService22.DeleteHelloworld", in)
	out := new(Helloworld)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloworldService22Service) UpdateHelloworld(ctx context.Context, in *Helloworld, opts ...client.CallOption) (*Helloworld, error) {
	req := c.c.NewRequest(c.name, "HelloworldService22.UpdateHelloworld", in)
	out := new(Helloworld)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloworldService22Service) InsertHelloworld(ctx context.Context, in *Helloworld, opts ...client.CallOption) (*Helloworld, error) {
	req := c.c.NewRequest(c.name, "HelloworldService22.InsertHelloworld", in)
	out := new(Helloworld)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloworldService22Service) QueryHelloworldDetail(ctx context.Context, in *HelloworldFilter, opts ...client.CallOption) (*Helloworld, error) {
	req := c.c.NewRequest(c.name, "HelloworldService22.QueryHelloworldDetail", in)
	out := new(Helloworld)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloworldService22Service) QueryHelloworld(ctx context.Context, in *HelloworldFilter, opts ...client.CallOption) (*HelloworldList, error) {
	req := c.c.NewRequest(c.name, "HelloworldService22.QueryHelloworld", in)
	out := new(HelloworldList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HelloworldService22 service

type HelloworldService22Handler interface {
	DeleteHelloworld(context.Context, *HelloworldFilter, *Helloworld) error
	UpdateHelloworld(context.Context, *Helloworld, *Helloworld) error
	InsertHelloworld(context.Context, *Helloworld, *Helloworld) error
	QueryHelloworldDetail(context.Context, *HelloworldFilter, *Helloworld) error
	QueryHelloworld(context.Context, *HelloworldFilter, *HelloworldList) error
}

func RegisterHelloworldService22Handler(s server.Server, hdlr HelloworldService22Handler, opts ...server.HandlerOption) error {
	type helloworldService22 interface {
		DeleteHelloworld(ctx context.Context, in *HelloworldFilter, out *Helloworld) error
		UpdateHelloworld(ctx context.Context, in *Helloworld, out *Helloworld) error
		InsertHelloworld(ctx context.Context, in *Helloworld, out *Helloworld) error
		QueryHelloworldDetail(ctx context.Context, in *HelloworldFilter, out *Helloworld) error
		QueryHelloworld(ctx context.Context, in *HelloworldFilter, out *HelloworldList) error
	}
	type HelloworldService22 struct {
		helloworldService22
	}
	h := &helloworldService22Handler{hdlr}
	return s.Handle(s.NewHandler(&HelloworldService22{h}, opts...))
}

type helloworldService22Handler struct {
	HelloworldService22Handler
}

func (h *helloworldService22Handler) DeleteHelloworld(ctx context.Context, in *HelloworldFilter, out *Helloworld) error {
	return h.HelloworldService22Handler.DeleteHelloworld(ctx, in, out)
}

func (h *helloworldService22Handler) UpdateHelloworld(ctx context.Context, in *Helloworld, out *Helloworld) error {
	return h.HelloworldService22Handler.UpdateHelloworld(ctx, in, out)
}

func (h *helloworldService22Handler) InsertHelloworld(ctx context.Context, in *Helloworld, out *Helloworld) error {
	return h.HelloworldService22Handler.InsertHelloworld(ctx, in, out)
}

func (h *helloworldService22Handler) QueryHelloworldDetail(ctx context.Context, in *HelloworldFilter, out *Helloworld) error {
	return h.HelloworldService22Handler.QueryHelloworldDetail(ctx, in, out)
}

func (h *helloworldService22Handler) QueryHelloworld(ctx context.Context, in *HelloworldFilter, out *HelloworldList) error {
	return h.HelloworldService22Handler.QueryHelloworld(ctx, in, out)
}
