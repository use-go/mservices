// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/helloworld/handler.proto

package helloworld

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Helloworld service

func NewHelloworldEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Helloworld service

type HelloworldService interface {
	InsertInfo(ctx context.Context, in *Info, opts ...client.CallOption) (*Info, error)
	DeleteInfo(ctx context.Context, in *InfoFilter, opts ...client.CallOption) (*Info, error)
	UpdateInfo(ctx context.Context, in *Info, opts ...client.CallOption) (*Info, error)
	QueryInfo(ctx context.Context, in *InfoFilter, opts ...client.CallOption) (*InfoList, error)
	QueryInfoDetail(ctx context.Context, in *InfoFilter, opts ...client.CallOption) (*Info, error)
}

type helloworldService struct {
	c    client.Client
	name string
}

func NewHelloworldService(name string, c client.Client) HelloworldService {
	return &helloworldService{
		c:    c,
		name: name,
	}
}

func (c *helloworldService) InsertInfo(ctx context.Context, in *Info, opts ...client.CallOption) (*Info, error) {
	req := c.c.NewRequest(c.name, "Helloworld.InsertInfo", in)
	out := new(Info)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloworldService) DeleteInfo(ctx context.Context, in *InfoFilter, opts ...client.CallOption) (*Info, error) {
	req := c.c.NewRequest(c.name, "Helloworld.DeleteInfo", in)
	out := new(Info)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloworldService) UpdateInfo(ctx context.Context, in *Info, opts ...client.CallOption) (*Info, error) {
	req := c.c.NewRequest(c.name, "Helloworld.UpdateInfo", in)
	out := new(Info)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloworldService) QueryInfo(ctx context.Context, in *InfoFilter, opts ...client.CallOption) (*InfoList, error) {
	req := c.c.NewRequest(c.name, "Helloworld.QueryInfo", in)
	out := new(InfoList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloworldService) QueryInfoDetail(ctx context.Context, in *InfoFilter, opts ...client.CallOption) (*Info, error) {
	req := c.c.NewRequest(c.name, "Helloworld.QueryInfoDetail", in)
	out := new(Info)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Helloworld service

type HelloworldHandler interface {
	InsertInfo(context.Context, *Info, *Info) error
	DeleteInfo(context.Context, *InfoFilter, *Info) error
	UpdateInfo(context.Context, *Info, *Info) error
	QueryInfo(context.Context, *InfoFilter, *InfoList) error
	QueryInfoDetail(context.Context, *InfoFilter, *Info) error
}

func RegisterHelloworldHandler(s server.Server, hdlr HelloworldHandler, opts ...server.HandlerOption) error {
	type helloworld interface {
		InsertInfo(ctx context.Context, in *Info, out *Info) error
		DeleteInfo(ctx context.Context, in *InfoFilter, out *Info) error
		UpdateInfo(ctx context.Context, in *Info, out *Info) error
		QueryInfo(ctx context.Context, in *InfoFilter, out *InfoList) error
		QueryInfoDetail(ctx context.Context, in *InfoFilter, out *Info) error
	}
	type Helloworld struct {
		helloworld
	}
	h := &helloworldHandler{hdlr}
	return s.Handle(s.NewHandler(&Helloworld{h}, opts...))
}

type helloworldHandler struct {
	HelloworldHandler
}

func (h *helloworldHandler) InsertInfo(ctx context.Context, in *Info, out *Info) error {
	return h.HelloworldHandler.InsertInfo(ctx, in, out)
}

func (h *helloworldHandler) DeleteInfo(ctx context.Context, in *InfoFilter, out *Info) error {
	return h.HelloworldHandler.DeleteInfo(ctx, in, out)
}

func (h *helloworldHandler) UpdateInfo(ctx context.Context, in *Info, out *Info) error {
	return h.HelloworldHandler.UpdateInfo(ctx, in, out)
}

func (h *helloworldHandler) QueryInfo(ctx context.Context, in *InfoFilter, out *InfoList) error {
	return h.HelloworldHandler.QueryInfo(ctx, in, out)
}

func (h *helloworldHandler) QueryInfoDetail(ctx context.Context, in *InfoFilter, out *Info) error {
	return h.HelloworldHandler.QueryInfoDetail(ctx, in, out)
}
