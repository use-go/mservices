// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/commets/handler.proto

package commets

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/2637309949/micro/v3/service/api"
	client "github.com/2637309949/micro/v3/service/client"
	server "github.com/2637309949/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Commets service

func NewCommetsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Commets service

type CommetsService interface {
	InsertInfo(ctx context.Context, in *InsertInfoRequest, opts ...client.CallOption) (*InsertInfoResponse, error)
	DeleteInfo(ctx context.Context, in *DeleteInfoRequest, opts ...client.CallOption) (*DeleteInfoResponse, error)
	UpdateInfo(ctx context.Context, in *UpdateInfoRequest, opts ...client.CallOption) (*UpdateInfoResponse, error)
	QueryInfo(ctx context.Context, in *QueryInfoRequest, opts ...client.CallOption) (*QueryInfoResponse, error)
	QueryInfoDetail(ctx context.Context, in *QueryInfoDetailRequest, opts ...client.CallOption) (*QueryInfoDetailResponse, error)
}

type commetsService struct {
	c    client.Client
	name string
}

func NewCommetsService(name string, c client.Client) CommetsService {
	return &commetsService{
		c:    c,
		name: name,
	}
}

func (c *commetsService) InsertInfo(ctx context.Context, in *InsertInfoRequest, opts ...client.CallOption) (*InsertInfoResponse, error) {
	req := c.c.NewRequest(c.name, "Commets.InsertInfo", in)
	out := new(InsertInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commetsService) DeleteInfo(ctx context.Context, in *DeleteInfoRequest, opts ...client.CallOption) (*DeleteInfoResponse, error) {
	req := c.c.NewRequest(c.name, "Commets.DeleteInfo", in)
	out := new(DeleteInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commetsService) UpdateInfo(ctx context.Context, in *UpdateInfoRequest, opts ...client.CallOption) (*UpdateInfoResponse, error) {
	req := c.c.NewRequest(c.name, "Commets.UpdateInfo", in)
	out := new(UpdateInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commetsService) QueryInfo(ctx context.Context, in *QueryInfoRequest, opts ...client.CallOption) (*QueryInfoResponse, error) {
	req := c.c.NewRequest(c.name, "Commets.QueryInfo", in)
	out := new(QueryInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commetsService) QueryInfoDetail(ctx context.Context, in *QueryInfoDetailRequest, opts ...client.CallOption) (*QueryInfoDetailResponse, error) {
	req := c.c.NewRequest(c.name, "Commets.QueryInfoDetail", in)
	out := new(QueryInfoDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Commets service

type CommetsHandler interface {
	InsertInfo(context.Context, *InsertInfoRequest, *InsertInfoResponse) error
	DeleteInfo(context.Context, *DeleteInfoRequest, *DeleteInfoResponse) error
	UpdateInfo(context.Context, *UpdateInfoRequest, *UpdateInfoResponse) error
	QueryInfo(context.Context, *QueryInfoRequest, *QueryInfoResponse) error
	QueryInfoDetail(context.Context, *QueryInfoDetailRequest, *QueryInfoDetailResponse) error
}

func RegisterCommetsHandler(s server.Server, hdlr CommetsHandler, opts ...server.HandlerOption) error {
	type commets interface {
		InsertInfo(ctx context.Context, in *InsertInfoRequest, out *InsertInfoResponse) error
		DeleteInfo(ctx context.Context, in *DeleteInfoRequest, out *DeleteInfoResponse) error
		UpdateInfo(ctx context.Context, in *UpdateInfoRequest, out *UpdateInfoResponse) error
		QueryInfo(ctx context.Context, in *QueryInfoRequest, out *QueryInfoResponse) error
		QueryInfoDetail(ctx context.Context, in *QueryInfoDetailRequest, out *QueryInfoDetailResponse) error
	}
	type Commets struct {
		commets
	}
	h := &commetsHandler{hdlr}
	return s.Handle(s.NewHandler(&Commets{h}, opts...))
}

type commetsHandler struct {
	CommetsHandler
}

func (h *commetsHandler) InsertInfo(ctx context.Context, in *InsertInfoRequest, out *InsertInfoResponse) error {
	return h.CommetsHandler.InsertInfo(ctx, in, out)
}

func (h *commetsHandler) DeleteInfo(ctx context.Context, in *DeleteInfoRequest, out *DeleteInfoResponse) error {
	return h.CommetsHandler.DeleteInfo(ctx, in, out)
}

func (h *commetsHandler) UpdateInfo(ctx context.Context, in *UpdateInfoRequest, out *UpdateInfoResponse) error {
	return h.CommetsHandler.UpdateInfo(ctx, in, out)
}

func (h *commetsHandler) QueryInfo(ctx context.Context, in *QueryInfoRequest, out *QueryInfoResponse) error {
	return h.CommetsHandler.QueryInfo(ctx, in, out)
}

func (h *commetsHandler) QueryInfoDetail(ctx context.Context, in *QueryInfoDetailRequest, out *QueryInfoDetailResponse) error {
	return h.CommetsHandler.QueryInfoDetail(ctx, in, out)
}
